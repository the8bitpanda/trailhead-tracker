public without sharing class TrailheadTrackerChallengesController {
    
    public Boolean batchesProcessing{get;set;}
    public List<Trailhead_User__c> listTrailheadUsers {get;set;}
    public List<FeedItemWrapper> listChatterFeed {get;set;}
    public String orgBaseURL {get;set;}
    public String groupId {get;set;}
    public String displayDate {get;set;}
    public Date challengeDate {get;set;}
    public boolean isWeekend {get;set;}
    
    
    
    public TrailheadTrackerChallengesController()
    {
        List<AsyncApexJob> asyncApexJobList  = [SELECT Id, Status, ApexClass.Name FROM AsyncApexJob 
                                                where ApexClass.Name = 'BatchToUpdateTrailheadStats' 
                                                AND (Status != 'Aborted' AND Status != 'Completed' AND Status != 'Failed')];       
        
        batchesProcessing = !asyncApexJobList.isEmpty();
        
        orgBaseURL = (URL.getOrgDomainUrl().toString()).substringBetween('delegate=', ']'); 
        
        groupId = Trailhead_Tracker__c.getInstance().Trailblazers_Group_Id__c;
        
        isWeekend = (((DateTime)  date.today()).format('E') == 'Sat' || ((DateTime)  date.today()).format('E') == 'Sun')?true:false;
        
        
        String dayOfTheWeek = ((DateTime)  date.today()).format('E');
        if(dayOfTheWeek == 'Sat')
        {
            challengeDate = (date.today()).addDays(-1);
        }
        else if(dayOfTheWeek == 'Sun') 
        {
            challengeDate = (date.today()).addDays(-2);
        }
        else
        {
            challengeDate = date.today();
        }
        resetUsers();
        
        Trailhead_Tracker__c tt = Trailhead_Tracker__c.getInstance();
        Set<Id> feedItemIds = new Set<Id>();
        for(TopicAssignment varTopicAssignment : [SELECT Id, TopicId, EntityId FROM TopicAssignment WHERE Topic.Name = :tt.Challenge_Topic__c ORDER BY CreatedDate DESC LIMIT 10])
        {
            feedItemIds.add(varTopicAssignment.EntityId);
        }
        
        listChatterFeed = new List<FeedItemWrapper>();
        if(!feedItemIds.isEmpty())
        {
            for(FeedItem varFeedItem : [Select Id, CreatedBy.Name, CreatedById, ParentId, Parent.Name, Body, CommentCount, LikeCount, CreatedDate From FeedItem where Id IN :feedItemIds ORDER BY CreatedDate DESC])
            {
                FeedItemWrapper varFeedItemWrapper = new FeedItemWrapper();
                
                varFeedItemWrapper.Id = varFeedItem.Id;            
                varFeedItemWrapper.commentCount = varFeedItem.CommentCount;
                varFeedItemWrapper.likeCount = varFeedItem.LikeCount;
                varFeedItemWrapper.createdDate = varFeedItem.CreatedDate;
                varFeedItemWrapper.body = varFeedItem.Body;
                
                if(varFeedItemWrapper.Body.containsIgnoreCase('[This post was auto-generated by Trailhead Tracker]'))
                {
                    varFeedItemWrapper.Body = varFeedItemWrapper.Body.replace('\n\n[This post was auto-generated by Trailhead Tracker]', '');
                    varFeedItemWrapper.Body = varFeedItemWrapper.Body.replace('\n','<br/><br/>');
                    varFeedItemWrapper.Body = varFeedItemWrapper.Body.replace('challenge!','challenge! &#127881;');
                    varFeedItemWrapper.publisherName = varFeedItem.Parent.Name;
                    varFeedItemWrapper.publisherId = varFeedItem.ParentId;
                    varFeedItemWrapper.type = 'Group';
                }
                else
                {
                    varFeedItemWrapper.publisherName = varFeedItem.CreatedBy.Name;
                    varFeedItemWrapper.publisherId = varFeedItem.CreatedById;
                    varFeedItemWrapper.type = 'User';
                }
                try
                {
                    varFeedItemWrapper.publisherInitials = (String.fromCharArray(new List<integer> { varFeedItemWrapper.publisherName.charAt(0) } )+''+((varFeedItemWrapper.publisherName.contains(' '))?String.fromCharArray(new List<integer> { varFeedItemWrapper.publisherName.charAt(varFeedItemWrapper.publisherName.indexOf(' ')+1) }):'') ).toUpperCase();
                }
                catch(Exception varException)
                {
                    varFeedItemWrapper.publisherInitials = '';
                }
                listChatterFeed.add(varFeedItemWrapper);
            }
        }
    }
    
    public PageReference reRunBatch()
    {
        
        List<AsyncApexJob> asyncApexJobList  = [SELECT Id, Status, ApexClass.Name FROM AsyncApexJob 
                                                where ApexClass.Name = 'BatchToUpdateTrailheadStats' 
                                                AND (Status != 'Aborted' AND Status != 'Completed' AND Status != 'Failed')];       
        
        if(asyncApexJobList.isEmpty())
        {   
            BatchToUpdateTrailheadStats batchToUpdateTrailheadStats = new BatchToUpdateTrailheadStats(); 
            database.executebatch(batchToUpdateTrailheadStats, 1);
        }
        
        PageReference tempPage = ApexPages.currentPage();            
        tempPage.setRedirect(true);
        return tempPage;
    }
    
    public void setPreviousDay()
    {

        String dayOfTheWeek = ((DateTime) challengeDate).format('E');
        
        if(dayOfTheWeek == 'Mon')
        {
            challengeDate = challengeDate.addDays(-3);
        }
        else 
        {
            challengeDate = challengeDate.addDays(-1);
        }
        resetUsers();
    }
    
    public void setNextDay()
    {
        if(challengeDate != system.today())
        {   
            String dayOfTheWeek = ((DateTime) challengeDate).format('E');
            
            if(dayOfTheWeek == 'Fri')
            {
                challengeDate = challengeDate.addDays(3);
            }
            else 
            {
                challengeDate = challengeDate.addDays(1);
            }
            resetUsers();
        }
    }
    
    public void resetUsers()
    {
        displayDate = DateTime.newInstance(challengeDate.year(),challengeDate.month(),challengeDate.day()).format('EEEE, MMMM d, YYYY');
        listTrailheadUsers = [Select Id, Name, Profile_Picture_URL__c, Trailhead_Id__c, Streak__c, (Select Trailhead_Badge__r.Name, Trailhead_Badge__r.Icon_URL__c, Trailhead_Badge__r.URL__c, Trailhead_Badge__r.Title__c from Badges_Achieved__r where DAY_ONLY(CreatedDate) = :challengeDate limit 3) from Trailhead_User__c ORDER BY Name];
    }
    
    public class FeedItemWrapper
    {
        public Id id {get;set;}    
        public String publisherId  {get;set;}    
        public String publisherName  {get;set;}    
        public String publisherInitials {get;set;} 
        public String type {get;set;} 
        public String body {get;set;}    
        public Integer commentCount {get;set;}    
        public Integer likeCount {get;set;}    
        public DateTime createdDate {get;set;}   
    }
    
}